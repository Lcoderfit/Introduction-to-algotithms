#include<iostream>
#include<random>
#include<vector>

using namespace std;

typedef vector<vector<int> > IntVecDouble;

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int> candidates, int target) {
        IntVecDouble ans;
        vector<int>cur;
        backTrack(ans, cur, candidates, 0, 0, target);
        return ans;
    }
    void backTrack(IntVecDouble& ans, vector<int>cur,
                   vector<int> candidates, int num, int i, int target){
        if(i>candidates.size() || num>target)
            return;
        if(num == target){
            cur.push_back(candidates[i]);
            ans.push_back(cur);
            return;
        }
        backTrack(ans, cur.push_back(candidates[i]), candidates, num+candidates[i], i, target);
        backTrack(ans, cur.push_back(candidates[i+1]), candidates, num+candidates[i], i+1, target);
    }
};

int main()
{
    int n;
    while(cin>>n){
        srand((unsigned)time(NULL));
        vector<int>candidates(n, 0);
        for(int i=0;i<n;i++){
            candidates[i]=rand()%100;
        }
        int target=rand()%10;
        Solution s;
        IntVecDouble ans=s.combinationSum(candidates, target);
        for(int i=0;i<ans.size();i++){
            cout<<ans[i]<<endl;
        }
    }

    return 0;
}
